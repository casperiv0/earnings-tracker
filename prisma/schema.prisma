// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  email         String         @unique
  name          String
  imageUrl      String?
  Expenses      Expenses[]
  Income        Income[]
  Subscriptions Subscription[]

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ProcessedExpense ProcessedExpense[]
}

model Subscription {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  user        User             @relation(fields: [userId], references: [id])
  userId      String           @db.ObjectId
  name        String
  description String?
  price       Float
  type        SubscriptionType @default(Monthly)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Expenses {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  description String?
  user        User              @relation(fields: [userId], references: [id])
  userId      String            @db.ObjectId
  date        EarningsEntryDate @relation(fields: [dateId], references: [id])
  dateId      String            @unique @db.ObjectId
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  processedExpense   ProcessedExpense? @relation(fields: [processedExpenseId], references: [id], onDelete: Cascade)
  processedExpenseId String?           @db.ObjectId
}

model ProcessedExpense {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  totalAmount  Float
  amountPerDay Int
  description  String?
  date         EarningsEntryDate @relation(fields: [dateId], references: [id])
  dateId       String            @unique @db.ObjectId
  user         User              @relation(fields: [userId], references: [id])
  userId       String            @db.ObjectId
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  expenses     Expenses[]
}

model Income {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  description String?
  user        User              @relation(fields: [userId], references: [id])
  userId      String            @db.ObjectId
  date        EarningsEntryDate @relation(fields: [dateId], references: [id])
  dateId      String            @unique @db.ObjectId
  type        IncomeType        @default(Other)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model EarningsEntryDate {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  month            Month
  year             Int
  Expenses         Expenses[]
  Income           Income[]
  ProcessedExpense ProcessedExpense?
}

enum Month {
  January
  February
  March
  April
  May
  June
  July
  August
  September
  October
  November
  December
}

enum SubscriptionType {
  Monthly
  Yearly
}

enum IncomeType {
  Salary
  PocketMoney
  Other
}
